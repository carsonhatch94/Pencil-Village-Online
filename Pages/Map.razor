@page "/map"
@inject GridStateService GridState
@inject ResourceService ResourceService
@using PencilVillageOnline.Components
@using PencilVillageOnline.Services
@using PencilVillageOnline.Models
@implements IDisposable

<PageTitle>Map</PageTitle>

<h3>Map</h3>

<!-- Resource Management Area -->
<ResourcePanel />

<div class="mb-3">
    <button class="btn btn-danger" @onclick="ResetTerrain">Reset Terrain</button>
    <button class="btn btn-primary ms-2" @onclick="ToggleEditMode">
        @(isEditMode ? "Exit Edit" : "Edit Buildings")
    </button>
    <span class="ms-3">Total squares: @(GridWidth* GridHeight)</span>
    <span class="ms-3">Squares with buildings: @squares.Values.Count(s => s.Building != BuildingState.None)</span>
</div>

@if (isEditMode && selectedSquare != null)
{
    <div class="mb-3 p-3 border rounded">
        <h5>Editing Square (X: @(selectedSquare.Col + 1), Y: @(selectedSquare.Row + 1))</h5>
        <div class="row">
            <div class="col-md-6">
                <label class="form-label">Terrain Type (Read-only):</label>
                <input class="form-control" value="@selectedSquare.Terrain" readonly />
            </div>
            <div class="col-md-6">
                <label class="form-label">Building State:</label>
                <select class="form-select" @bind="selectedSquare.Building">
                    @foreach (BuildingState building in Enum.GetValues<BuildingState>())
                    {
                        <option value="@building">@building</option>
                    }
                </select>
            </div>
        </div>
        <button class="btn btn-success mt-2" @onclick="SaveSquareChanges">Save Changes</button>
    </div>
}

<div class="terrain-legend mb-3">
    <span class="legend-item"><span class="legend-color terrain-woods"></span> Woods (Cols 1-11)</span>
    <span class="legend-item"><span class="legend-color terrain-rocky"></span> Rocky (Cols 12-23)</span>
    <span class="legend-item"><span class="legend-color terrain-field"></span> Field (Cols 24-35)</span>
    <span class="legend-item"><span class="legend-color terrain-scrub"></span> Scrub (Cols 36-47)</span>
    <span class="legend-item"><span class="legend-color terrain-crag"></span> Crag (Cols 48-57)</span>
</div>

<div class="pixel-grid">
    @for (int row = 0; row < GridHeight; row++)
    {
        @for (int col = 0; col < GridWidth; col++)
        {
            int localRow = row;
            int localCol = col;
            <div class="@GetSquareClass(localRow, localCol)"
                 data-row="@localRow"
                 data-col="@localCol"
                 title="@GetSquareTooltip(localRow, localCol)"
                 @onclick="() => OnSquareClick(localRow, localCol)">
            </div>
        }
    }
</div>

<style>
    .resource-panel {
        background-color: #f8f9fa;
        border: 2px solid #dee2e6;
    }

    .resource-item {
        margin-bottom: 10px;
    }

        .resource-item .form-label {
            font-weight: bold;
            margin-bottom: 5px;
            display: block;
        }

    .pixel-grid {
        display: grid;
        grid-template-columns: repeat(57, 25px);
        grid-template-rows: repeat(41, 25px);
        gap: 0;
        width: fit-content;
        border: 1px solid #ccc;
        margin: 20px 0;
    }

    .pixel-square {
        width: 25px;
        height: 25px;
        border: 1px solid black;
        cursor: pointer;
        transition: all 0.1s ease;
    }

        .pixel-square:hover {
            border-width: 2px;
            border-color: #333;
        }

        .pixel-square.selected {
            border: 3px solid #ff9800;
            box-shadow: 0 0 5px rgba(255, 152, 0, 0.7);
        }

        /* Terrain type colors */
        .pixel-square.terrain-woods, .legend-color.terrain-woods {
            background-color: #006400; /* Dark Green */
        }

        .pixel-square.terrain-rocky, .legend-color.terrain-rocky {
            background-color: #d3d3d3; /* Light Grey */
        }

        .pixel-square.terrain-field, .legend-color.terrain-field {
            background-color: #ffffe0; /* Light Yellow */
        }

        .pixel-square.terrain-scrub, .legend-color.terrain-scrub {
            background-color: #deb887; /* Light Brown */
        }

        .pixel-square.terrain-crag, .legend-color.terrain-crag {
            background-color: #404040; /* Dark Grey */
        }

        /* Building state indicators */
        .pixel-square.building-partofbuilding {
            border: 3px solid #2196f3;
        }

        .pixel-square.building-rubble {
            border: 3px solid #f44336;
        }

    .terrain-legend {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 5px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 14px;
    }

    .legend-color {
        width: 20px;
        height: 20px;
        border: 1px solid black;
        display: inline-block;
    }
</style>

@code {
    private const int GridWidth = 57;
    private const int GridHeight = 41;
    private Dictionary<(int row, int col), Square> squares = new();
    private bool isEditMode = false;
    private Square? selectedSquare = null;

    protected override async Task OnInitializedAsync()
    {
        squares = await GridState.LoadGridStateAsync();
        await ResourceService.LoadResourcesAsync();

        // Subscribe to resource changes for UI updates
        ResourceService.OnResourcesChanged += StateHasChanged;
    }

    public void Dispose()
    {
        // Unsubscribe from events to prevent memory leaks
        ResourceService.OnResourcesChanged -= StateHasChanged;
    }

    // Depot management methods
    private async Task AddDepot()
    {
        await ResourceService.TryAddDepotAsync();
    }

    private async Task RemoveDepot()
    {
        await ResourceService.TryRemoveDepotAsync();
    }

    // Resource management methods
    private async Task AddWood(int amount)
    {
        await ResourceService.TryAddWoodAsync(amount);
    }

    private async Task RemoveWood(int amount)
    {
        await ResourceService.TrySpendResourcesAsync(amount, 0, 0);
    }

    private async Task AddStone(int amount)
    {
        await ResourceService.TryAddStoneAsync(amount);
    }

    private async Task RemoveStone(int amount)
    {
        await ResourceService.TrySpendResourcesAsync(0, amount, 0);
    }

    private async Task AddGold(int amount)
    {
        await ResourceService.TryAddGoldAsync(amount);
    }

    private async Task RemoveGold(int amount)
    {
        await ResourceService.TrySpendResourcesAsync(0, 0, amount);
    }

    private async Task OnSquareClick(int row, int col)
    {
        var position = (row, col);

        if (isEditMode)
        {
            // In edit mode, select the square for editing buildings only
            if (squares.ContainsKey(position))
            {
                selectedSquare = squares[position];
                StateHasChanged();
            }
        }
        // No action in normal mode since terrain is fixed
    }

    private async Task SaveSquareChanges()
    {
        if (selectedSquare != null)
        {
            await GridState.SaveGridStateAsync(squares);
            // Update resource storage when buildings change (in case depots were added/removed)
            await ResourceService.UpdateMaxStorageFromDepotsAsync();
            StateHasChanged();
        }
    }

    private void ToggleEditMode()
    {
        isEditMode = !isEditMode;
        selectedSquare = null;
        StateHasChanged();
    }

    private async Task ResetTerrain()
    {
        await GridState.ClearGridStateAsync();
        squares = await GridState.LoadGridStateAsync();
        selectedSquare = null;
        StateHasChanged();
    }

    private string GetSquareClass(int row, int col)
    {
        var classes = new List<string> { "pixel-square" };
        var position = (row, col);

        if (squares.ContainsKey(position))
        {
            var square = squares[position];
            classes.Add($"terrain-{square.Terrain.ToString().ToLower()}");

            if (square.Building != BuildingState.None)
            {
                classes.Add($"building-{square.Building.ToString().ToLower()}");
            }
        }

        if (selectedSquare != null && selectedSquare.Row == row && selectedSquare.Col == col)
        {
            classes.Add("selected");
        }

        return string.Join(" ", classes);
    }

    private string GetSquareTooltip(int row, int col)
    {
        var position = (row, col);
        if (squares.ContainsKey(position))
        {
            var square = squares[position];
            return $"{square.Terrain} terrain, {square.Building} (X: {col + 1}, Y: {row + 1})";
        }
        return $"(X: {col + 1}, Y: {row + 1})";
    }
}