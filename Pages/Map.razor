@page "/map"
@inject GridStateService GridState
@using PencilVillageOnline.Services
@using PencilVillageOnline.Models

<PageTitle>Map</PageTitle>

<h3>Map</h3>

<div class="mb-3">
    <button class="btn btn-secondary" @onclick="ClearGrid">Clear Grid</button>
    <button class="btn btn-primary ms-2" @onclick="ToggleEditMode">
        @(isEditMode ? "Exit Edit" : "Edit Mode")
    </button>
    <span class="ms-3">Squares: @squares.Count</span>
</div>

@if (isEditMode && selectedSquare != null)
{
    <div class="mb-3 p-3 border rounded">
        <h5>Editing Square (@selectedSquare.Row, @selectedSquare.Col)</h5>
        <div class="row">
            <div class="col-md-6">
                <label class="form-label">Terrain Type:</label>
                <select class="form-select" @bind="selectedSquare.Terrain">
                    @foreach (TerrainType terrain in Enum.GetValues<TerrainType>())
                    {
                        <option value="@terrain">@terrain</option>
                    }
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">Building State:</label>
                <select class="form-select" @bind="selectedSquare.Building">
                    @foreach (BuildingState building in Enum.GetValues<BuildingState>())
                    {
                        <option value="@building">@building</option>
                    }
                </select>
            </div>
        </div>
        <button class="btn btn-success mt-2" @onclick="SaveSquareChanges">Save Changes</button>
    </div>
}

<div class="pixel-grid">
    @for (int row = 0; row < GridHeight; row++)
    {
        @for (int col = 0; col < GridWidth; col++)
        {
            int localRow = row;
            int localCol = col;
            <div class="@GetSquareClass(localRow, localCol)"
                 data-row="@localRow"
                 data-col="@localCol"
                 title="@GetSquareTooltip(localRow, localCol)"
                 @onclick="() => OnSquareClick(localRow, localCol)">
            </div>
        }
    }
</div>

<style>
    .pixel-grid {
        display: grid;
        grid-template-columns: repeat(57, 25px);
        grid-template-rows: repeat(41, 25px);
        gap: 0;
        width: fit-content;
        border: 1px solid #ccc;
        margin: 20px 0;
    }

    .pixel-square {
        width: 25px;
        height: 25px;
        background-color: #f0f0f0;
        border: 1px solid black;
        cursor: pointer;
        transition: background-color 0.1s ease;
    }

        .pixel-square:hover {
            background-color: #ddd;
        }

        .pixel-square.has-content {
            background-color: #e6f3ff;
        }

        .pixel-square.selected {
            background-color: #ffeb3b;
            border: 2px solid #ff9800;
        }

        /* Terrain type colors */
        .pixel-square.terrain-woods {
            background-color: #006400; /* Dark Green */
        }

        .pixel-square.terrain-rocky {
            background-color: #808080; /* Grey */
        }

        .pixel-square.terrain-field {
            background-color: #ffffe0; /* Light Yellow */
        }

        .pixel-square.terrain-scrub {
            background-color: #deb887; /* Light Brown */
        }

        .pixel-square.terrain-crag {
            background-color: #000000; /* Black */
        }

        /* Building state indicators */
        .pixel-square.building-partofbuilding {
            border: 3px solid #2196f3;
        }

        .pixel-square.building-rubble {
            border: 3px solid #f44336;
        }
</style>

@code {
    private const int GridWidth = 57;
    private const int GridHeight = 41;
    private Dictionary<(int row, int col), Square> squares = new();
    private bool isEditMode = false;
    private Square? selectedSquare = null;

    protected override async Task OnInitializedAsync()
    {
        squares = await GridState.LoadGridStateAsync();
    }

    private async Task OnSquareClick(int row, int col)
    {
        var position = (row, col);

        if (isEditMode)
        {
            // In edit mode, select the square for editing
            if (!squares.ContainsKey(position))
            {
                squares[position] = new Square(row, col);
            }
            selectedSquare = squares[position];
            StateHasChanged();
        }
        else
        {
            // In normal mode, toggle square existence
            if (squares.ContainsKey(position))
            {
                squares.Remove(position);
            }
            else
            {
                squares[position] = new Square(row, col);
            }

            await GridState.SaveGridStateAsync(squares);
            StateHasChanged();
        }
    }

    private async Task SaveSquareChanges()
    {
        if (selectedSquare != null)
        {
            await GridState.SaveGridStateAsync(squares);
            StateHasChanged();
        }
    }

    private void ToggleEditMode()
    {
        isEditMode = !isEditMode;
        selectedSquare = null;
        StateHasChanged();
    }

    private async Task ClearGrid()
    {
        squares.Clear();
        selectedSquare = null;
        await GridState.ClearGridStateAsync();
        StateHasChanged();
    }

    private string GetSquareClass(int row, int col)
    {
        var classes = new List<string> { "pixel-square" };
        var position = (row, col);

        if (squares.ContainsKey(position))
        {
            var square = squares[position];
            classes.Add("has-content");
            classes.Add($"terrain-{square.Terrain.ToString().ToLower()}");

            if (square.Building != BuildingState.None)
            {
                classes.Add($"building-{square.Building.ToString().ToLower()}");
            }
        }

        if (selectedSquare != null && selectedSquare.Row == row && selectedSquare.Col == col)
        {
            classes.Add("selected");
        }

        return string.Join(" ", classes);
    }

    private string GetSquareTooltip(int row, int col)
    {
        var position = (row, col);
        if (squares.ContainsKey(position))
        {
            var square = squares[position];
            return $"{square.Terrain} terrain, {square.Building}";
        }
        return $"Empty square ({row}, {col})";
    }
}